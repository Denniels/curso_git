import streamlit as st

def mostrar_contenido():
    st.markdown("<h2 class='module-header'>Flujo de Trabajo en GitHub</h2>", unsafe_allow_html=True)
    
    # Tabs para organizar el contenido
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["Introducci√≥n a GitHub", "Forks y Pull Requests", "Colaboraci√≥n Efectiva", "Buenas Pr√°cticas", "Quiz"])
    
    with tab1:
        st.markdown("### GitHub: M√°s que un Repositorio Git")
        
        col1, col2 = st.columns([3, 2])
        
        with col1:
            st.markdown("""
            **GitHub** es una plataforma web que proporciona alojamiento para repositorios Git y a√±ade caracter√≠sticas adicionales
            para la colaboraci√≥n y gesti√≥n de proyectos de software.
            
            <div class='highlight'>
            GitHub facilita la colaboraci√≥n en proyectos open source y privados, implementando un flujo de trabajo basado en ramas,
            forks y pull requests que ha revolucionado el desarrollo colaborativo.
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            #### Caracter√≠sticas principales de GitHub:
            
            - üìã **Issues**: Sistema de seguimiento de tareas, bugs y mejoras
            - üîÑ **Pull Requests**: Proponer, revisar y discutir cambios
            - üîç **Code Review**: Revisiones de c√≥digo colaborativas
            - üìä **Project Boards**: Gesti√≥n de proyectos tipo Kanban
            - üìÖ **Milestones**: Agrupaci√≥n de issues por objetivos
            - üîî **Notifications**: Sistema de alertas para actividades
            - üìù **Wiki**: Documentaci√≥n colaborativa
            - üìà **Insights**: M√©tricas y an√°lisis del proyecto
            - üöÄ **Actions**: Automatizaci√≥n de CI/CD y workflows
            - üõ°Ô∏è **Security**: An√°lisis de vulnerabilidades
            """)
        
        with col2:
            # Imagen de GitHub
            st.image("https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png", width=200)
            
            st.markdown("""
            <div class='tip'>
            <b>¬øSab√≠as que?</b> GitHub fue adquirido por Microsoft en 2018 por 7.500 millones de d√≥lares,
            pero mantiene su independencia operativa.
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("### GitHub vs. Git")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            #### Git
            
            - Sistema de control de versiones distribuido
            - Software de l√≠nea de comandos
            - Funciona localmente (no requiere internet)
            - Enfocado en tracking de cambios y ramas
            - Creado por Linus Torvalds para Linux
            """)
        
        with col2:
            st.markdown("""
            #### GitHub
            
            - Plataforma web basada en Git
            - Interfaz gr√°fica + API
            - Servicios en la nube (requiere internet)
            - Enfocado en colaboraci√≥n y gesti√≥n de proyectos
            - Creado por Tom Preston-Werner, Chris Wanstrath y PJ Hyett
            """)
        
        # Interfaz de GitHub
        st.markdown("### Interfaz de GitHub")
        
        st.markdown("""
        Familiarizarse con la interfaz de GitHub es esencial para trabajar en equipo:
        """)
        
        # Navegaci√≥n principal
        with st.expander("üß≠ Navegaci√≥n Principal"):
            st.markdown("""
            La barra de navegaci√≥n superior contiene:
            
            - **Barra de b√∫squeda**: Buscar repositorios, c√≥digo, usuarios
            - **Pull requests**: Ver PRs asignados o creados por ti
            - **Issues**: Ver issues asignados o creados por ti
            - **Notifications** (campana): Ver notificaciones pendientes
            - **New** (signo +): Crear nuevo repositorio, organizaci√≥n, etc.
            - **Perfil**: Acceder a tu perfil, configuraciones, etc.
            """)
        
        # P√°gina de repositorio
        with st.expander("üìÅ P√°gina de Repositorio"):
            st.markdown("""
            La p√°gina principal de un repositorio contiene:
            
            - **Code**: Explorador de archivos del repositorio
            - **Issues**: Sistema de tickets para tareas/bugs
            - **Pull requests**: Propuestas de cambios
            - **Actions**: Configuraci√≥n de CI/CD y automatizaciones
            - **Projects**: Tableros Kanban para gesti√≥n
            - **Wiki**: Documentaci√≥n del proyecto
            - **Security**: An√°lisis de vulnerabilidades
            - **Insights**: Estad√≠sticas del proyecto
            - **Settings**: Configuraci√≥n del repositorio (para admins)
            
            Adem√°s, la p√°gina principal muestra:
            
            - README.md renderizado
            - Estad√≠sticas (estrellas, forks, etc.)
            - Informaci√≥n sobre el √∫ltimo commit
            - Lista de contribuidores
            """)
        
        # Explorador de c√≥digo
        with st.expander("üîç Explorador de C√≥digo"):
            st.markdown("""
            Al navegar por el c√≥digo, puedes:
            
            - Ver archivos y carpetas organizados jer√°rquicamente
            - Leer el contenido de los archivos con resaltado de sintaxis
            - Ver el historial de cambios de un archivo (bot√≥n "History")
            - Editar archivos directamente en el navegador
            - Navegar entre ramas y tags
            - Buscar en el repositorio
            - Ver y descargar versiones espec√≠ficas (releases)
            """)
        
        # Simulador de creaci√≥n de cuenta
        st.markdown("### Primeros Pasos en GitHub")
        
        st.markdown("""
        Para comenzar a utilizar GitHub, necesitas:
        
        1. **Crear una cuenta** en [github.com](https://github.com)
        2. **Configurar tu perfil**
        3. **Configurar SSH** o tokens de acceso personal
        4. **Crear o clonar** un repositorio
        """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### Configurar Git para GitHub")
            
            st.code("""
            # Configurar nombre de usuario
            git config --global user.name "Tu Nombre"
            
            # Configurar email (usa el mismo de tu cuenta GitHub)
            git config --global user.email "tu.email@ejemplo.com"
            
            # Configurar autenticaci√≥n (recomendado: SSH)
            # 1. Generar clave SSH
            ssh-keygen -t ed25519 -C "tu.email@ejemplo.com"
            
            # 2. A√±adir clave a agente SSH
            eval "$(ssh-agent -s)"
            ssh-add ~/.ssh/id_ed25519
            
            # 3. Copiar clave p√∫blica
            cat ~/.ssh/id_ed25519.pub
            # (A√±adir esta clave en GitHub > Settings > SSH and GPG keys)
            """)
        
        with col2:
            st.markdown("#### Crear un repositorio")
            
            st.markdown("""
            **Desde la web:**
            
            1. Haz clic en "+" en la esquina superior derecha
            2. Selecciona "New repository"
            3. Completa la informaci√≥n:
               - Nombre del repositorio
               - Descripci√≥n (opcional)
               - P√∫blico o privado
               - Inicializar con README (recomendado)
            4. Haz clic en "Create repository"
            
            **Desde un proyecto existente:**
            
            ```bash
            # En la carpeta de tu proyecto
            git init
            git add .
            git commit -m "Initial commit"
            git branch -M main
            git remote add origin git@github.com:username/repo.git
            git push -u origin main
            ```
            """)
    
    with tab2:
        st.markdown("### Forks y Pull Requests")
        
        st.markdown("""
        El flujo de trabajo basado en **forks** y **pull requests** es uno de los conceptos m√°s importantes
        para colaborar en proyectos de GitHub, especialmente en proyectos open source.
        """)
        
        col1, col2 = st.columns([3, 2])
        
        with col1:
            st.markdown("#### ¬øQu√© es un Fork?")
            
            st.markdown("""
            Un **fork** es una copia personal de un repositorio de otra persona u organizaci√≥n.
            
            - Se aloja en tu cuenta de GitHub
            - Te permite experimentar libremente sin afectar el proyecto original
            - Mantiene una conexi√≥n con el repositorio original (upstream)
            - Es el primer paso para contribuir a proyectos ajenos
            
            <div class='highlight'>
            El fork te da una "zona de pruebas" segura para trabajar antes de proponer cambios al proyecto original.
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("#### ¬øQu√© es un Pull Request?")
            
            st.markdown("""
            Un **pull request (PR)** es una propuesta para integrar cambios de una rama a otra, normalmente
            desde tu fork al repositorio original.
            
            - Permite a los mantenedores revisar tus cambios
            - Proporciona un espacio para discusi√≥n y feedback
            - Puede ser actualizado con nuevos commits
            - Puede incluir m√∫ltiples archivos y commits
            - Puede pasar por pruebas automatizadas (CI/CD)
            
            <div class='highlight'>
            El pull request es el mecanismo principal para la revisi√≥n de c√≥digo colaborativa en GitHub.
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Imagen de flujo de fork y PR
            st.image("https://docs.github.com/assets/cb-23923/mw-1000/images/help/pull_requests/pull-request-fork-branch-merge.webp", caption="Flujo de Fork y Pull Request")
            
            st.markdown("""
            <div class='tip'>
            <b>Terminolog√≠a importante:</b>
            
            - <b>Upstream</b>: El repositorio original del que hiciste fork
            - <b>Origin</b>: Tu fork del repositorio
            - <b>Base branch</b>: Rama destino para tus cambios (ej. main)
            - <b>Head branch</b>: Rama con tus cambios
            </div>
            """, unsafe_allow_html=True)
        
        # El flujo de trabajo con fork y PR
        st.markdown("### El Flujo de Trabajo Completo")
        
        st.markdown("""
        A continuaci√≥n se muestra el flujo completo para contribuir a un proyecto usando fork y pull request:
        """)
        
        # Diagrama de flujo
        col1, col2, col3 = st.columns([1, 3, 1])
        
        with col2:
            st.markdown("""
            1. **Fork** del repositorio original ‚Üí **Tu fork**
            2. **Clone** de tu fork a tu m√°quina local
            3. Crear una **rama de caracter√≠sticas**
            4. Realizar **cambios** y commits
            5. **Push** de la rama a tu fork
            6. Crear un **Pull Request** al repositorio original
            7. Responder a la **revisi√≥n de c√≥digo**
            8. Los mantenedores **fusionan** tu PR
            9. **Sincronizar** tu fork con el repositorio original
            """)
        
        # Acorde√≥n para los pasos detallados
        with st.expander("1Ô∏è‚É£ Hacer Fork y Clonar"):
            st.markdown("""
            **Paso 1: Hacer fork del repositorio**
            
            1. Navega al repositorio que quieres contribuir
            2. Haz clic en el bot√≥n "Fork" en la esquina superior derecha
            3. Selecciona tu cuenta como destino
            
            **Paso 2: Clonar tu fork localmente**
            
            ```bash
            # Reemplaza USERNAME y REPO con los valores correctos
            git clone https://github.com/USERNAME/REPO.git
            cd REPO
            
            # A√±adir el repositorio original como "upstream"
            git remote add upstream https://github.com/ORIGINAL-OWNER/REPO.git
            
            # Verificar los remotos configurados
            git remote -v
            # origin    https://github.com/USERNAME/REPO.git (fetch)
            # origin    https://github.com/USERNAME/REPO.git (push)
            # upstream  https://github.com/ORIGINAL-OWNER/REPO.git (fetch)
            # upstream  https://github.com/ORIGINAL-OWNER/REPO.git (push)
            ```
            """)
        
        with st.expander("2Ô∏è‚É£ Crear Rama y Hacer Cambios"):
            st.markdown("""
            **Paso 3: Crear una rama para tus cambios**
            
            ```bash
            # Aseg√∫rate de estar actualizado con upstream
            git fetch upstream
            git checkout main
            git merge upstream/main
            
            # Crear una nueva rama
            git checkout -b feature/mi-nueva-caracteristica
            ```
            
            **Paso 4: Hacer cambios y commits**
            
            ```bash
            # Hacer cambios en los archivos...
            
            # A√±adir los cambios
            git add .
            
            # Hacer commit con un mensaje descriptivo
            git commit -m "A√±adir nueva funcionalidad para X"
            
            # Si es necesario, hacer m√°s cambios y commits...
            ```
            """)
        
        with st.expander("3Ô∏è‚É£ Push y Crear Pull Request"):
            st.markdown("""
            **Paso 5: Push de tu rama a tu fork**
            
            ```bash
            git push origin feature/mi-nueva-caracteristica
            ```
            
            **Paso 6: Crear un Pull Request**
            
            1. Ve a tu fork en GitHub
            2. Deber√≠as ver un banner sugiriendo crear un PR, o puedes ir a la pesta√±a "Pull requests"
            3. Haz clic en "New pull request"
            4. Aseg√∫rate de que:
               - Base repository: el repositorio original
               - Base branch: main (o la rama correcta)
               - Head repository: tu fork
               - Compare branch: feature/mi-nueva-caracteristica
            5. Haz clic en "Create pull request"
            6. A√±ade un t√≠tulo descriptivo
            7. A√±ade una descripci√≥n detallada (qu√©, por qu√©, c√≥mo)
            8. Haz clic en "Create pull request"
            """)
        
        with st.expander("4Ô∏è‚É£ Revisi√≥n y Actualizaciones"):
            st.markdown("""
            **Paso 7: Responder a la revisi√≥n de c√≥digo**
            
            1. Los mantenedores revisar√°n tu PR y pueden solicitar cambios
            2. Puedes ver los comentarios en la interfaz de GitHub
            
            **Para actualizar tu PR con cambios adicionales:**
            
            ```bash
            # Aseg√∫rate de estar en tu rama de caracter√≠sticas
            git checkout feature/mi-nueva-caracteristica
            
            # Hacer m√°s cambios
            # ...
            
            # A√±adir y hacer commit
            git add .
            git commit -m "Ajustar X seg√∫n revisi√≥n"
            
            # Push de los nuevos cambios
            git push origin feature/mi-nueva-caracteristica
            ```
            
            El PR se actualizar√° autom√°ticamente con tus nuevos commits.
            """)
        
        with st.expander("5Ô∏è‚É£ Fusi√≥n y Sincronizaci√≥n"):
            st.markdown("""
            **Paso 8: Fusi√≥n del Pull Request**
            
            Una vez que tu PR es aprobado, los mantenedores lo fusionar√°n con el repositorio principal.
            
            **Paso 9: Sincronizar tu fork**
            
            Despu√©s de que tu PR sea fusionado, debes actualizar tu fork:
            
            ```bash
            # Cambiar a la rama principal
            git checkout main
            
            # Obtener los cambios del repositorio original
            git fetch upstream
            
            # Fusionar los cambios a tu rama local
            git merge upstream/main
            
            # Actualizar tu fork en GitHub
            git push origin main
            
            # Opcional: eliminar tu rama de caracter√≠sticas
            git branch -d feature/mi-nueva-caracteristica
            git push origin --delete feature/mi-nueva-caracteristica
            ```
            """)
        
        # Simulador de Pull Request
        st.markdown("### Simulador de Pull Request")
        
        pr_title = st.text_input("T√≠tulo del Pull Request:", placeholder="A√±adir funci√≥n de b√∫squeda avanzada")
        
        pr_description = st.text_area(
            "Descripci√≥n del Pull Request:",
            placeholder="## Cambios realizados\n\n- A√±adida nueva funci√≥n de b√∫squeda\n- Mejorada la interfaz de usuario\n\n## Por qu√© es necesario\n\nLos usuarios necesitaban una forma m√°s eficiente de...",
            height=150
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            base_repo = st.text_input("Repositorio base (upstream):", value="original/proyecto")
            base_branch = st.selectbox("Rama base:", ["main", "develop", "staging"])
        
        with col2:
            head_repo = st.text_input("Tu fork:", value="tu-usuario/proyecto")
            head_branch = st.text_input("Tu rama:", value="feature/nueva-funcionalidad")
        
        if st.button("Crear Pull Request (Simulaci√≥n)"):
            if pr_title and pr_description:
                st.success(f"¬°Pull Request '{pr_title}' creado exitosamente!")
                
                st.markdown(f"""
                ### Pull Request: {pr_title}
                
                **De:** `{head_repo}:{head_branch}`  
                **A:** `{base_repo}:{base_branch}`
                
                ---
                
                {pr_description}
                
                ---
                
                **Estado:** Abierto  
                **Revisores:** Sin asignar  
                """)
                
                st.info("En un PR real, podr√≠as asignar revisores, etiquetas, proyectos y milestones.")
            else:
                st.error("Por favor, completa al menos el t√≠tulo y la descripci√≥n.")
    
    with tab3:
        st.markdown("### Colaboraci√≥n Efectiva en GitHub")
        
        st.markdown("""
        GitHub ofrece numerosas herramientas para facilitar la colaboraci√≥n en equipo m√°s all√° de los pull requests.
        """)
        
        # Issues
        with st.expander("üé´ Issues: Gesti√≥n de Tareas y Bugs"):
            col1, col2 = st.columns([3, 2])
            
            with col1:
                st.markdown("""
                Los **Issues** son el sistema de tickets de GitHub para rastrear tareas, mejoras, bugs y cualquier tipo de tarea pendiente.
                
                **Caracter√≠sticas principales:**
                
                - T√≠tulos y descripciones con soporte Markdown
                - Etiquetas personalizables (bugs, mejoras, etc.)
                - Asignaci√≥n a responsables
                - Milestones para agrupar por objetivos
                - Referencia autom√°tica a otros issues o PRs
                - Comentarios para discusi√≥n
                - Estado abierto/cerrado
                - Plantillas personalizables
                
                **Buenas pr√°cticas:**
                
                - Usa t√≠tulos claros y descriptivos
                - Incluye pasos para reproducir bugs
                - A√±ade capturas de pantalla o GIFs si es posible
                - Usa etiquetas consistentemente
                - Cierra issues con mensajes de commit cuando sea apropiado
                """)
            
            with col2:
                st.markdown("""
                <div class='tip'>
                <b>Consejo Pro:</b> Puedes cerrar autom√°ticamente issues con mensajes de commit usando palabras clave como "Fixes", "Closes", o "Resolves" seguido del n√∫mero de issue.
                
                Ejemplo:
                <pre>git commit -m "A√±adir validaci√≥n de formulario. Fixes #42"</pre>
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown("""
                <div class='highlight'>
                <b>Plantillas de Issues</b>
                
                Puedes crear plantillas en <code>.github/ISSUE_TEMPLATE/</code> para estandarizar la informaci√≥n.
                </div>
                """, unsafe_allow_html=True)
        
        # Revisiones de c√≥digo
        with st.expander("üîç Code Reviews: La Clave para la Calidad"):
            st.markdown("""
            Las **revisiones de c√≥digo** son fundamentales para mantener la calidad y compartir conocimiento en el equipo.
            
            **En GitHub, puedes:**
            
            - Revisar archivos espec√≠ficos o todo el PR
            - A√±adir comentarios en l√≠neas espec√≠ficas
            - Sugerir cambios exactos (con bot√≥n de aplicar)
            - Aprobar o solicitar cambios formalmente
            - Marcar comentarios como resueltos
            
            **Tipos de revisi√≥n:**
            
            1. **Comment**: Feedback general sin aprobaci√≥n/rechazo
            2. **Approve**: Aprobaci√≥n para fusionar
            3. **Request changes**: Requiere correcciones antes de fusionar
            
            **Buenas pr√°cticas como revisor:**
            
            - S√© respetuoso y constructivo
            - Explica el "por qu√©", no solo el "qu√©"
            - Diferencia entre sugerencias importantes y preferencias de estilo
            - Menciona lo bueno, no solo lo que hay que corregir
            - S√© oportuno en tus revisiones
            
            **Buenas pr√°cticas como autor:**
            
            - Haz PRs peque√±os y enfocados
            - A√±ade descripciones detalladas
            - Responde a todos los comentarios
            - No te tomes las cr√≠ticas personalmente
            - Aprovecha para aprender
            """)
            
            st.image("https://docs.github.com/assets/cb-42604/mw-1000/images/help/pull_requests/pull-request-review-view-changes.webp", caption="Interfaz de revisi√≥n de c√≥digo en GitHub")
        
        # Discussions
        with st.expander("üí¨ Discussions: Conversaciones Estructuradas"):
            st.markdown("""
            **GitHub Discussions** es una caracter√≠stica que proporciona un espacio para conversaciones que no encajan bien como issues o pull requests.
            
            **Ideal para:**
            
            - Preguntas y respuestas
            - Anuncios y noticias
            - Ideas y feedback
            - Mostrar y compartir proyectos
            - Debates generales sobre el proyecto
            
            **Caracter√≠sticas:**
            
            - Categor√≠as personalizables
            - Marcado de respuestas como soluci√≥n
            - Votaci√≥n de respuestas
            - Formato Markdown completo
            - Conversaciones anidadas
            
            **Para activar Discussions:**
            
            1. Ve a tu repositorio
            2. Pesta√±a Settings
            3. Secci√≥n "Features"
            4. Marca la opci√≥n "Discussions"
            
            Es especialmente √∫til para proyectos de c√≥digo abierto con comunidades activas o proyectos internos que requieren discusiones m√°s estructuradas que las issues.
            """)
        
        # Project Boards
        with st.expander("üìã Project Boards: Gesti√≥n Visual"):
            st.markdown("""
            Los **Project Boards** de GitHub son tableros Kanban para gestionar y priorizar el trabajo de forma visual.
            
            **Tipos de proyectos:**
            
            - **Proyectos cl√°sicos**: Dentro de un repositorio o a nivel de organizaci√≥n
            - **Proyectos (beta)**: Nueva experiencia con m√°s flexibilidad
            
            **Caracter√≠sticas:**
            
            - Columnas personalizables (To do, In progress, Done, etc.)
            - Automatizaci√≥n de movimiento de tarjetas
            - Integraci√≥n con issues y PRs
            - Notas para tareas r√°pidas
            - Filtros y b√∫squeda
            - Asignaci√≥n de responsables
            
            **Ejemplo de uso:**
            
            1. Crear un nuevo proyecto en la pesta√±a "Projects"
            2. Configurar columnas como "To do", "In progress", "Review", "Done"
            3. A√±adir issues existentes o crear nuevas tarjetas
            4. Configurar automatizaci√≥n (ej. mover a "Done" cuando se cierra el issue)
            5. Arrastrar tarjetas entre columnas seg√∫n avance el trabajo
            
            Es una excelente manera de visualizar el progreso del proyecto y gestionar prioridades.
            """)
            
            st.image("https://docs.github.com/assets/cb-77061/mw-1000/images/help/issues/project-board-basic-kanban-template.webp", caption="Project Board en GitHub")
        
        # Actions
        with st.expander("ü§ñ GitHub Actions: Automatizaci√≥n"):
            st.markdown("""
            **GitHub Actions** permite automatizar flujos de trabajo directamente en tu repositorio.
            
            **Casos de uso comunes:**
            
            - CI/CD: Construcci√≥n, pruebas y despliegue autom√°ticos
            - An√°lisis de c√≥digo y revisi√≥n de calidad
            - Publicaci√≥n de paquetes
            - Notificaciones y alertas
            - Generaci√≥n de documentaci√≥n
            
            **Conceptos clave:**
            
            - **Workflow**: Proceso automatizado configurable
            - **Job**: Conjunto de pasos que se ejecutan en un runner
            - **Step**: Tarea individual que puede ejecutar comandos
            - **Action**: Unidad reutilizable de c√≥digo
            - **Event**: Actividad que desencadena un workflow
            
            **Ejemplo de workflow b√°sico:**
            """)
            
            st.code("""
            # .github/workflows/ci.yml
            name: CI
            
            on:
              push:
                branches: [ main ]
              pull_request:
                branches: [ main ]
            
            jobs:
              build:
                runs-on: ubuntu-latest
                
                steps:
                - uses: actions/checkout@v3
                
                - name: Set up Node.js
                  uses: actions/setup-node@v3
                  with:
                    node-version: 16
                    
                - name: Install dependencies
                  run: npm ci
                  
                - name: Run tests
                  run: npm test
                  
                - name: Build
                  run: npm run build
            """, language="yaml")
            
            st.markdown("""
            Los workflows se definen en archivos YAML en el directorio `.github/workflows/` de tu repositorio.
            """)
        
        # Simulador de Issue
        st.markdown("### Crear un Issue")
        
        issue_title = st.text_input("T√≠tulo del Issue:", placeholder="Error en la validaci√≥n del formulario de contacto")
        
        issue_type = st.selectbox(
            "Tipo de Issue:",
            ["üêõ Bug", "‚ú® Nueva funcionalidad", "üìö Documentaci√≥n", "üî® Mejora", "‚ùì Pregunta"]
        )
        
        issue_description = st.text_area(
            "Descripci√≥n:",
            placeholder="## Descripci√≥n\nDescribe el problema o sugerencia...\n\n## Pasos para reproducir\n1. Ir a...\n2. Hacer clic en...\n\n## Comportamiento esperado\nDeber√≠a...\n\n## Capturas de pantalla\n(Si aplica)",
            height=150
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            issue_priority = st.selectbox("Prioridad:", ["Alta", "Media", "Baja"])
            issue_assignee = st.text_input("Asignar a:", placeholder="username")
        
        with col2:
            issue_labels = st.multiselect(
                "Etiquetas:",
                ["bug", "enhancement", "documentation", "good first issue", "help wanted", "question", "invalid", "wontfix"]
            )
            issue_milestone = st.selectbox("Milestone:", ["v1.0", "v1.1", "v2.0", "Ninguno"])
        
        if st.button("Crear Issue (Simulaci√≥n)"):
            if issue_title and issue_description:
                st.success(f"¬°Issue '{issue_title}' creado exitosamente!")
                
                # Mostrar el issue creado
                labels_str = ", ".join([f"`{label}`" for label in issue_labels]) if issue_labels else "Ninguna"
                assignee_str = issue_assignee if issue_assignee else "Sin asignar"
                milestone_str = issue_milestone if issue_milestone != "Ninguno" else "Sin milestone"
                
                st.markdown(f"""
                ### Issue: {issue_title}
                
                **Tipo:** {issue_type}  
                **Prioridad:** {issue_priority}  
                **Asignado a:** {assignee_str}  
                **Etiquetas:** {labels_str}  
                **Milestone:** {milestone_str}
                
                ---
                
                {issue_description}
                
                ---
                
                **Estado:** Abierto  
                """)
            else:
                st.error("Por favor, completa al menos el t√≠tulo y la descripci√≥n.")
    
    with tab4:
        st.markdown("### Buenas Pr√°cticas en GitHub")
        
        st.markdown("""
        Seguir buenas pr√°cticas en GitHub mejora la colaboraci√≥n, la calidad del c√≥digo y la experiencia de todos los participantes.
        """)
        
        # Acorde√≥n de buenas pr√°cticas
        with st.expander("üìù Documentaci√≥n Efectiva"):
            st.markdown("""
            Una buena documentaci√≥n es crucial para cualquier proyecto colaborativo.
            
            #### README.md
            
            El README es lo primero que ver√°n los visitantes de tu repositorio. Debe incluir:
            
            - **T√≠tulo y descripci√≥n** clara del proyecto
            - **Badges** de estado (build, versi√≥n, licencia)
            - **Instalaci√≥n** y configuraci√≥n
            - **Uso** b√°sico con ejemplos
            - **Contribuci√≥n** (c√≥mo pueden ayudar otros)
            - **Licencia**
            - **Cr√©ditos** y reconocimientos
            
            #### Otros archivos importantes
            
            - **CONTRIBUTING.md**: Gu√≠a detallada para contribuir
            - **CODE_OF_CONDUCT.md**: Normas de comportamiento
            - **SECURITY.md**: C√≥mo reportar vulnerabilidades
            - **CHANGELOG.md**: Historial de cambios
            - **LICENSE**: T√©rminos legales de uso
            
            #### Wikis
            
            Para documentaci√≥n m√°s extensa, usa la Wiki de GitHub:
            
            - Gu√≠as de uso avanzado
            - Arquitectura del proyecto
            - Decisiones de dise√±o
            - FAQ
            """)
            
            st.code("""
            # Proyecto Awesome
            
            [![Build Status](https://img.shields.io/travis/usuario/proyecto.svg)](https://travis-ci.org/usuario/proyecto)
            [![Version](https://img.shields.io/npm/v/proyecto.svg)](https://www.npmjs.com/package/proyecto)
            [![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)
            
            Una descripci√≥n clara y concisa del proyecto y sus beneficios.
            
            ## Instalaci√≥n
            
            ```bash
            npm install proyecto
            ```
            
            ## Uso
            
            ```javascript
            const proyecto = require('proyecto');
            
            proyecto.doAwesome();
            ```
            
            ## Caracter√≠sticas
            
            - Hace cosas incre√≠bles
            - Resuelve problemas complejos
            - F√°cil de usar
            
            ## Contribuci√≥n
            
            Las contribuciones son bienvenidas! Por favor lee [CONTRIBUTING.md](CONTRIBUTING.md) para m√°s detalles.
            
            ## Licencia
            
            Este proyecto est√° licenciado bajo la licencia MIT - ver [LICENSE](LICENSE) para m√°s detalles.
            """, language="markdown")
        
        with st.expander("üåø Estrategia de Ramificaci√≥n"):
            st.markdown("""
            Una estrategia de ramificaci√≥n clara facilita la colaboraci√≥n y el mantenimiento.
            
            #### GitHub Flow
            
            Para proyectos con despliegue continuo:
            
            1. `main` siempre est√° listo para producci√≥n
            2. Crear ramas desde `main` para nuevos cambios
            3. Abrir PR temprano para discusi√≥n
            4. Merge a `main` tras revisi√≥n y CI
            5. Desplegar inmediatamente
            
            #### Git Flow
            
            Para proyectos con ciclos de release planificados:
            
            - `main`: c√≥digo en producci√≥n
            - `develop`: pr√≥xima versi√≥n
            - `feature/*`: nuevas caracter√≠sticas
            - `release/*`: preparaci√≥n para release
            - `hotfix/*`: correcciones urgentes
            
            #### Trunk-Based
            
            Para equipos experimentados con buena cobertura de pruebas:
            
            - Todos trabajan en `main` (trunk)
            - Ramas de muy corta duraci√≥n
            - Feature toggles para funciones incompletas
            - CI riguroso
            
            #### Recomendaciones generales
            
            - Usar nombres descriptivos para las ramas
            - Mantener las ramas sincronizadas con `main`
            - Eliminar ramas despu√©s de fusionar
            - Proteger ramas importantes con reglas
            """)
        
        with st.expander("üìä Pull Requests Efectivos"):
            st.markdown("""
            Los pull requests son el centro de la colaboraci√≥n en GitHub.
            
            #### Tama√±o y enfoque
            
            - Mant√©n los PRs **peque√±os y enfocados** en un solo objetivo
            - Ideal: <300 l√≠neas de cambio
            - Un PR = Una funcionalidad, correcci√≥n o mejora
            
            #### T√≠tulo y descripci√≥n
            
            - **T√≠tulo claro** que resuma el prop√≥sito
            - Descripci√≥n detallada que incluya:
              - Qu√© cambios se han hecho
              - Por qu√© son necesarios
              - C√≥mo se implementaron
              - C√≥mo probar los cambios
              - Capturas o demos si aplica
            
            #### Revisi√≥n y discusi√≥n
            
            - Responde a todos los comentarios
            - Mant√©n una actitud constructiva
            - Actualiza el PR con nuevos commits
            - Usa "Resolve conversation" cuando est√© resuelto
            
            #### Ejemplo de plantilla de PR
            """)
            
            st.code("""
            ## Descripci√≥n
            
            Breve descripci√≥n del cambio y su prop√≥sito.
            
            Fixes #123 (n√∫mero de issue relacionado)
            
            ## Tipo de cambio
            
            - [ ] Correcci√≥n de bug
            - [ ] Nueva funcionalidad
            - [ ] Breaking change
            - [ ] Mejora de documentaci√≥n
            
            ## C√≥mo se ha probado
            
            Describa las pruebas que realiz√≥ para verificar los cambios.
            
            ## Capturas de pantalla
            
            Si corresponde, agregue capturas de pantalla para ayudar a explicar su problema.
            
            ## Lista de verificaci√≥n
            
            - [ ] El c√≥digo sigue las pautas de estilo del proyecto
            - [ ] Se han a√±adido pruebas para los cambios
            - [ ] La documentaci√≥n ha sido actualizada
            - [ ] Los cambios generan nuevas advertencias
            """, language="markdown")
        
        with st.expander("üîí Seguridad y Permisos"):
            st.markdown("""
            La seguridad es una responsabilidad compartida en cualquier proyecto.
            
            #### Protecci√≥n de ramas
            
            Configura reglas para ramas importantes:
            
            - Requerir revisi√≥n de PR antes de merge
            - Requerir verificaci√≥n de status (CI/tests)
            - Requerir resoluci√≥n de conversaciones
            - Prohibir push forzado
            - Restringir qui√©n puede pushear
            
            Para configurar: Repositorio > Settings > Branches > Branch protection rules
            
            #### Secretos y datos sensibles
            
            - **Nunca** commits de secretos, API keys, contrase√±as
            - Usa variables de entorno para desarrollo local
            - Usa GitHub Secrets para CI/CD
            - Utiliza `.gitignore` apropiadamente
            - Considera herramientas como git-crypt para casos especiales
            
            #### Dependencias y vulnerabilidades
            
            - Activa Dependabot alerts
            - Revisa regularmente las alertas de seguridad
            - Mant√©n las dependencias actualizadas
            - Considera escaneo de c√≥digo SAST/DAST
            
            #### Permisos de repositorio
            
            - Usa permisos de "menor privilegio"
            - Crea equipos con roles espec√≠ficos
            - Revisa colaboradores regularmente
            - Considera la verificaci√≥n en dos pasos
            """)
        
        with st.expander("ü§ù Etiqueta y Cultura"):
            st.markdown("""
            La forma en que interactuamos es tan importante como el c√≥digo.
            
            #### C√≥digo de conducta
            
            Establece un c√≥digo de conducta expl√≠cito:
            
            - Comportamiento esperado e inaceptable
            - Proceso de reporte y aplicaci√≥n
            - Alcance (issues, PRs, eventos)
            
            GitHub tiene plantillas para ayudarte a crear uno.
            
            #### Comunicaci√≥n respetuosa
            
            - S√© cort√©s y profesional
            - Enf√≥cate en el c√≥digo, no en la persona
            - Explica el "por qu√©", no solo el "qu√©"
            - Reconoce el buen trabajo
            - Asume buenas intenciones
            
            #### Mentor√≠a y crecimiento
            
            - Etiqueta issues como "good first issue" para nuevos contribuidores
            - Proporciona feedback constructivo
            - Documenta procesos para reducir barreras de entrada
            - Celebra las primeras contribuciones
            
            #### Reconocimiento
            
            - Agradece a los contribuidores
            - Menciona a todos en release notes
            - Considera un archivo CONTRIBUTORS.md
            - Destaca contribuciones significativas
            """)
        
        # Checklist de buenas pr√°cticas
        st.markdown("### Checklist de Buenas Pr√°cticas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### Documentaci√≥n")
            
            docs_readme = st.checkbox("README.md completo y claro")
            docs_contributing = st.checkbox("Gu√≠a de contribuci√≥n (CONTRIBUTING.md)")
            docs_code_of_conduct = st.checkbox("C√≥digo de conducta")
            docs_templates = st.checkbox("Plantillas de PR e Issues")
            docs_changelog = st.checkbox("Registro de cambios (CHANGELOG.md)")
            
            st.markdown("#### Estrategia de Ramas")
            
            branch_strategy = st.checkbox("Estrategia de ramificaci√≥n definida")
            branch_protection = st.checkbox("Protecci√≥n de ramas principales")
            branch_naming = st.checkbox("Convenci√≥n de nombres para ramas")
        
        with col2:
            st.markdown("#### Revisi√≥n de C√≥digo")
            
            review_required = st.checkbox("Revisi√≥n obligatoria para PRs")
            review_codeowners = st.checkbox("Archivo CODEOWNERS configurado")
            review_style = st.checkbox("Linters y formatters autom√°ticos")
            
            st.markdown("#### CI/CD y Automatizaci√≥n")
            
            ci_tests = st.checkbox("Tests automatizados en CI")
            ci_linting = st.checkbox("Verificaci√≥n de estilo en CI")
            ci_deploy = st.checkbox("Despliegue automatizado")
        
        if st.button("Evaluar Pr√°cticas"):
            # Contar checkboxes marcados
            docs_score = sum([docs_readme, docs_contributing, docs_code_of_conduct, docs_templates, docs_changelog])
            branch_score = sum([branch_strategy, branch_protection, branch_naming])
            review_score = sum([review_required, review_codeowners, review_style])
            ci_score = sum([ci_tests, ci_linting, ci_deploy])
            
            total_score = docs_score + branch_score + review_score + ci_score
            max_score = 14
            percentage = (total_score / max_score) * 100
            
            st.progress(percentage / 100)
            
            if percentage >= 80:
                st.success(f"¬°Excelente! Tu proyecto sigue {total_score}/{max_score} buenas pr√°cticas recomendadas.")
            elif percentage >= 50:
                st.warning(f"Bien, pero hay espacio para mejorar. Sigues {total_score}/{max_score} buenas pr√°cticas recomendadas.")
            else:
                st.error(f"Necesitas mejorar significativamente. Solo sigues {total_score}/{max_score} buenas pr√°cticas recomendadas.")
            
            # Sugerencias espec√≠ficas
            st.markdown("### Recomendaciones para mejorar:")
            
            if docs_score < 3:
                st.markdown("- üìù **Mejora tu documentaci√≥n**: Un buen README y gu√≠as de contribuci√≥n son esenciales.")
            
            if branch_score < 2:
                st.markdown("- üåø **Define mejor tu estrategia de ramas**: Protege tus ramas principales y establece convenciones claras.")
            
            if review_score < 2:
                st.markdown("- üîç **Fortalece tu proceso de revisi√≥n**: Haz obligatorias las revisiones y considera usar CODEOWNERS.")
            
            if ci_score < 2:
                st.markdown("- ü§ñ **Automatiza m√°s**: Implementa tests, linting y despliegue automatizados con GitHub Actions.")
    
    with tab5:
        st.markdown("<h3 class='subheader'>Quiz: Flujo de Trabajo en GitHub</h3>", unsafe_allow_html=True)
        
        st.markdown("""
        Comprueba tu conocimiento sobre el flujo de trabajo en GitHub:
        """)
        
        # Pregunta 1
        q1 = st.radio(
            "1. ¬øQu√© es un 'fork' en GitHub?",
            [
                "Una rama dentro del repositorio original", 
                "Una copia del repositorio original en tu cuenta personal",
                "Un error en el c√≥digo",
                "Una funci√≥n para dividir archivos grandes"
            ]
        )
        
        # Pregunta 2
        q2 = st.radio(
            "2. ¬øCu√°l es el prop√≥sito principal de un Pull Request?",
            [
                "Descargar c√≥digo del repositorio remoto", 
                "Proponer cambios y solicitar que sean revisados e integrados",
                "Crear una nueva rama",
                "Forzar la actualizaci√≥n del repositorio local"
            ]
        )
        
        # Pregunta 3
        q3 = st.radio(
            "3. En GitHub, ¬øqu√© son los 'Issues'?",
            [
                "Errores que impiden que el c√≥digo compile",
                "Conflictos de merge que deben resolverse",
                "Un sistema para rastrear tareas, mejoras y bugs del proyecto",
                "Mensajes de error generados por GitHub Actions"
            ]
        )
        
        # Pregunta 4
        q4 = st.radio(
            "4. ¬øQu√© significa 'upstream' en el contexto de GitHub?",
            [
                "El repositorio original del que hiciste fork", 
                "La rama principal (main o master)",
                "Una rama que est√° por delante de la tuya",
                "El √∫ltimo commit en el historial"
            ]
        )
        
        # Pregunta 5
        q5 = st.radio(
            "5. ¬øCu√°l de estas NO es una caracter√≠stica de GitHub Actions?",
            [
                "Automatizaci√≥n de flujos de trabajo", 
                "Integraci√≥n continua (CI)",
                "Gesti√≥n de dependencias",
                "Edici√≥n colaborativa en tiempo real del mismo archivo"
            ]
        )
        
        # Bot√≥n para verificar respuestas
        if st.button("Verificar Respuestas"):
            score = 0
            
            if q1 == "Una copia del repositorio original en tu cuenta personal":
                score += 1
            
            if q2 == "Proponer cambios y solicitar que sean revisados e integrados":
                score += 1
                
            if q3 == "Un sistema para rastrear tareas, mejoras y bugs del proyecto":
                score += 1
                
            if q4 == "El repositorio original del que hiciste fork":
                score += 1
                
            if q5 == "Edici√≥n colaborativa en tiempo real del mismo archivo":
                score += 1
            
            st.success(f"¬°Obtuviste {score} de 5 respuestas correctas!")
            
            if score == 5:
                st.balloons()
                st.markdown("### üèÜ ¬°Perfecto! Dominas el flujo de trabajo en GitHub.")
            elif score >= 3:
                st.markdown("### üëç ¬°Buen trabajo! Tienes un buen entendimiento de GitHub.")
            else:
                st.markdown("### üìö Revisa nuevamente el material para reforzar tus conocimientos sobre GitHub.")
